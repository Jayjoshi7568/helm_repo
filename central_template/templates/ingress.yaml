{{- if and .Values.ingress ( .Values.ingress.enable ) }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.ingress.name }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- with .Values.ingress.className }}
  ingressClassName: {{ . }}
  {{- end }}
  {{- if .Values.ingress.tls }}
  tls:
    {{- range .Values.ingress.tls }}
    - hosts:
        {{- range .hosts }}
        - {{ . | quote }}
        {{- end }}
      secretName: {{ .secretName }}
    {{- end }}
  {{- end }}
  rules:
    {{- range .Values.ingress.rules }}
    {{- if .host }}   # Check if the host is defined
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            {{- with .pathType }}
            pathType: {{ . }}
            {{- end }}
            backend:
              service:
                name: {{ .serviceName | default $.serviceName }}   # Use path-level serviceName, fallback to host-level
                port:
                  number: {{ .portNumber | default $.portNumber }}  # Use path-level portNumber, fallback to host-level
          {{- end }}
    {{- else }}   # If no host is defined, use path-based routing
    - http:
        paths:
          {{- range .paths }}
          - path: {{ .path }}
            {{- with .pathType }}
            pathType: {{ . }}
            {{- end }}
            backend:
              service:
                name: {{ .serviceName | default $.serviceName }}   # Use path-level serviceName, fallback to host-level
                port:
                  number: {{ .portNumber | default $.portNumber }}  # Use path-level portNumber, fallback to host-level
          {{- end }}
    {{- end }}
    {{- end }}
{{- end }}
